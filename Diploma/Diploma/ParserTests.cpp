#include "stdafx.h"

#include "Parser.h"

#include <UnitTest++.h>

namespace
  {
  const int g_chanel_size = 63;

  void TEST_CHANEL(int i_index_of_chanel, const float* ip_expected)
    {
    Parser parser(_T("TestData\\Test.txt"));
    std::vector<float> chanel = parser.GetChanel(i_index_of_chanel);

    CHECK_EQUAL(g_chanel_size, chanel.size());
    for (size_t i = 0; i < chanel.size(); ++i)
      CHECK_EQUAL(*(ip_expected + i), chanel[i]);
    }
  }

SUITE(ParserTests)
  {
  //////////////////////////////////////////////////////////////////////////
  TEST(ReadNumberOfChanels)
    {
    Parser parser(_T("TestData\\Test.txt"));
    CHECK_EQUAL(5, parser.GetNumberOfChanels());
    }

  //////////////////////////////////////////////////////////////////////////
  TEST(CheckValues_Chanel0)
    {
    const float expected[g_chanel_size] = { -0.515, -1.987, -1.987, -1.987, -1.987, -1.987, 
                                            -1.987, -1.987, -1.990, -1.987, -1.987, -1.990, 
                                            -1.987, -1.990, -1.987, -1.987, -1.987, -1.987,
                                            -1.987, -1.992, -1.990, -1.990, -1.987, -1.985, 
                                            -1.987, -1.987, -1.987, -1.987, -1.987, -1.990,
                                            -1.990, -1.987, -1.990, -1.987, -1.985, -1.990,
                                            -1.990, -1.985, -1.987, -1.987, -1.987, -1.985,
                                            -1.987, -1.987, -1.987, -1.985, -1.987, -1.987,
                                            -1.990, -1.987, -1.987, -1.990, -1.987, -1.987,
                                            -1.985, -1.990, -1.987, -1.987, -1.987, -1.987,
                                            -1.990, -1.987, -1.987};
    TEST_CHANEL(0, expected);
    }

  //////////////////////////////////////////////////////////////////////////
  TEST(CheckValues_Chanel2)
    {
    const float expected[g_chanel_size] = {-2.256, -2.253, -2.256, -2.256, -2.253,
                                           -2.258, -2.261, -2.256, -2.258, -2.258,
                                           -2.253, -2.256, -2.258, -2.261, -2.256,
                                           -2.256, -2.258, -2.258, -2.253, -2.256,
                                           -2.258, -2.261, -2.256, -2.253, -2.253,
                                           -2.256, -2.258, -2.256, -2.258, -2.256,
                                           -2.258, -2.263, -2.256, -2.256, -2.256,
                                           -2.256, -2.251, -2.256, -2.256, -2.253,
                                           -2.268, -2.256, -2.256, -2.253, -2.253,
                                           -2.253, -2.258, -2.256, -2.258, -2.253,
                                           -2.249, -2.251, -2.256, -2.253, -2.253,
                                           -2.256, -2.256, -2.256, -2.253, -2.256,
                                           -2.253, -2.251, -2.256 };
    TEST_CHANEL(2, expected);
    }
  }